sumamos fracciones haciendo tdd

0 + 0 = 0
1 + 1 = 0


El metodo plus instancia otra fraccion y la suma a la anterior

    public Fraction plus(Fraction fraction) {
        return new Fraction(this.integerValue +
                fraction.integerValue);
    }

Otra forma de hacer lo mismo con mas lineas es

    public Fraction plus(Fraction fraction) {
        int sum = this.integerValue + fraction.integerValue
        return new Fraction(sum);
    }

1/2 + 1/2 =
        numerador   = 2 // si es mismo denominador
        denominador = 2 // si son multiplos; min(den % den2 ==0)

    public Fraction plus(Fraction otherFraction) {
        return new Fraction(this.integerValue +
                otherFraction.integerValue,denominator);
    }
Aca no pincha con los test viejos, porque denimonador, lo setea
pero nunca lo usa

3/2 + 6/4 =
        numerador   = 24 // es diferente denominador
        denominador = 8 // si son multiplos; min(den % den2 ==0)

--- cambios en sumas y restas con numeradores y denominadores

1) Cambie el constructor 1, y ahora harcodeo denominador a 1, porque
sabemos que si entra ahi (CONSTRUCTOR 1, O SEA SIN DENOMINADOR),
el denominador es siempre 1, por lo tanto es buena
practica; ESTA SOLUCION ES MAS MATEMATICA

Las puse en final, porque  veo que ambos constructores van a tocas a
integer y a denominador en plus, por lo tanto son final (deben ser)
    private final int integerValue;
    private int numerator;
    private final int denominator;

2) cambio en el constructor 1
        public Fraction(int integerValue) {
            this.integerValue = integerValue;
            this.denominator =1;
        }

--
Nuevo commit de microcambios: commit 16
Aca sigo los 3 pasos del proceso de cambio

3 pasos del proceso:

1) add new things
2) Write the clients
3) remove the old thing

En este ejemplo agrego numerator y saco integerValue,
lo dejo para que se vea que se depreca, mas adelante ya lo borro, porque no
se usa